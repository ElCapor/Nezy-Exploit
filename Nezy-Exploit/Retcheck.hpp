#include <iostream>
#include <Windows.h>
#include <string>
#include <thread>
#include <vector>
#include <mutex>


int aslr(uintptr_t address)
{
	return address - 0x400000 + reinterpret_cast<uintptr_t>(GetModuleHandleA(0));
}

const uintptr_t retcheck_address = aslr(0x49EC1B);


static void __declspec(noinline) __declspec(naked) stub()
{
	__asm
	{
		pop edi
		push retcheck_address
		jmp eax
	}
}


template <typename t>
class retcheck
{
private:
	uintptr_t address = 0;
public:
	retcheck(uintptr_t address) : address{ *reinterpret_cast<uintptr_t*>(&address) } {}

	template <typename... args>
	__declspec(noinline) auto operator()(args... a)
	{
		uintptr_t address = this->address;
		__asm mov eax, address
		return reinterpret_cast<t>(stub)(a...);
	}
};