#include <iostream>
#include <Windows.h>
#include <string>
#include <thread>
#include <vector>
#include <mutex>

#include "Retcheck.hpp"


uintptr_t roblox_state;

namespace Addresses
{
	using r_lua_newthread_t = uintptr_t(__cdecl*)(uintptr_t rs);
	auto r_lua_newthread = retcheck<r_lua_newthread_t>(aslr(0x18AB3D0));


	using r_luau_load_t = uintptr_t(__cdecl*)(uintptr_t rs, const char* chunk, const char* bytecode, int bytecode_size, int env);
	auto r_luau_load = retcheck<r_luau_load_t>(aslr(0x18AE510));


	using r_lua_getscheduler_t = uintptr_t(__cdecl*)();
	auto r_lua_getscheduler = (r_lua_getscheduler_t)(aslr(0xDD4450));


	using r_lua_getstate_t = uintptr_t(__thiscall*)(uintptr_t script_context, int* state_type);
	auto r_lua_getstate = (r_lua_getstate_t)(aslr(0x9EEDA0));


	using r_lua_print_t = uintptr_t(__cdecl*)(int type, const char* source);
	auto r_lua_print = retcheck<r_lua_print_t>(aslr(0x95E710));


	using r_lua_taskdefer_t = uintptr_t(__cdecl*)(uintptr_t rs);
	auto r_lua_taskdefer = retcheck<r_lua_taskdefer_t>(aslr(0x9EA560));


	using r_lua_setfield_t = uintptr_t(__stdcall*)(uintptr_t rs, int index, const char* name);
	auto r_lua_setfield = retcheck<r_lua_setfield_t>(aslr(0x18AC6A0));


	using r_lua_pushcclosure_t = uintptr_t(__stdcall*)(uintptr_t rs, int function, int a3, int a4, int a5);
	auto r_lua_pushcclosure = retcheck<r_lua_pushcclosure_t>(aslr(0x18AB690));


	using r_lua_pushvalue_t = uintptr_t(__cdecl*)(uintptr_t rs, int value);
	auto r_lua_pushvalue = retcheck<r_lua_pushvalue_t>(aslr(0x18ABB90));


	using r_lua_replace_t = uintptr_t(__cdecl*)(uintptr_t rs, int index);
	auto r_lua_replace = retcheck<r_lua_replace_t>(aslr(0x18AC4A0));


	using r_lua_settable_t = uintptr_t(__cdecl*)(uintptr_t rs, int index);
	auto r_lua_settable = retcheck<r_lua_settable_t>(aslr(0x18AC960));


	using r_lua_createtable_t = uintptr_t(__cdecl*)(uintptr_t rs, int a2, int a3);
	auto r_lua_createtable = retcheck<r_lua_createtable_t>(aslr(0x18AA820));


	using r_lua_setmetatable_t = uintptr_t(__cdecl*)(uintptr_t rs, int index);
	auto r_lua_setmetatable = retcheck<r_lua_setmetatable_t>(aslr(0x18AC770));


	using r_lua_pushstring_t = uintptr_t(__stdcall*)(uintptr_t rs, const char* source);
	auto r_lua_pushstring = retcheck<r_lua_pushstring_t>(aslr(0x18AB9D0));
}


namespace Offsets
{
	const uintptr_t lua_state_top = 12;
	const uintptr_t lua_state_base = 28;
}
